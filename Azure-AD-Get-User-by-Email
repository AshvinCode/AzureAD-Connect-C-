using Azure.Identity;

Aprivate static async Task<List<Microsoft.Graph.Models.User>> GetAzureADUserAllData()
{
    try
    {
        // Replace with your app registration details
        var clientId = "";
        var clientSecret = "";
        var tenantId = "";

        // Configure the MSAL confidential client
        var confidentialClient = ConfidentialClientApplicationBuilder
            .Create(clientId)
            .WithTenantId(tenantId)
            .WithClientSecret(clientSecret)
            .Build();

        var scopes = new[] { "https://graph.microsoft.com/.default" };

        // Create a credential and Graph client
        var options = new ClientSecretCredentialOptions
        {
            AuthorityHost = AzureAuthorityHosts.AzurePublicCloud,
        };

        var clientSecretCredential = new ClientSecretCredential(
            tenantId, clientId, clientSecret, options);

        var graphClient = new GraphServiceClient(clientSecretCredential, scopes);

        // List to hold all users
        var allUsers = new List<Microsoft.Graph.Models.User>();

        // Initial request for the first page
        var result = await graphClient.Users.GetAsync();
        var user = await graphClient.Users["dchea@umci.com"].GetAsync();
        return user;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
        throw;
    }
     return null;
}
