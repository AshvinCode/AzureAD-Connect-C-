using Azure.Identity;

 private static async Task<List<Microsoft.Graph.Models.User>> GetAzureADUserAllData()
        {
            try
            {
                // Replace with your app registration details
                var clientId = "";
                var clientSecret = "";
                var tenantId = "";

                // Configure the MSAL confidential client
                var confidentialClient = ConfidentialClientApplicationBuilder
                    .Create(clientId)
                    .WithTenantId(tenantId)
                    .WithClientSecret(clientSecret)
                    .Build();

                var scopes = new[] { "https://graph.microsoft.com/.default" };

                // Create a credential and Graph client
                var options = new ClientSecretCredentialOptions
                {
                    AuthorityHost = AzureAuthorityHosts.AzurePublicCloud,
                };

                var clientSecretCredential = new ClientSecretCredential(
                    tenantId, clientId, clientSecret, options);

                var graphClient = new GraphServiceClient(clientSecretCredential, scopes);

                // List to hold all users
                var allUsers = new List<Microsoft.Graph.Models.User>();

                // Initial request for the first page
                var result = await graphClient.Users.GetAsync();

                // Loop to get all pages
                while (result != null)
                {
                    // Add the current page of users to the list
                    if (result.Value != null)
                    {
                        allUsers.AddRange(result.Value);
                    }

                    // Check if there is a next page
                    if (result.OdataNextLink != null)
                    {
                        // Fetch the next page
                        result = await graphClient.Users.WithUrl(result.OdataNextLink).GetAsync();
                    }
                    else
                    {
                        result = null;
                    }
                }

                Console.WriteLine($"Total users fetched: {allUsers.Count}");
                return allUsers;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                throw;
            }
        }
